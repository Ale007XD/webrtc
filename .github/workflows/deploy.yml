name: Deploy WebRTC E2EE

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create deployment directory on VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        script: |
          mkdir -p /opt/webrtc-e2ee
          cd /opt/webrtc-e2ee
          
    - name: Copy project files to VPS
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        source: "docker-compose.yml,proxy/,turn/,scripts/"
        target: /opt/webrtc-e2ee/
        strip_components: 0

    - name: Deploy on VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        envs: |
          DOMAIN,EMAIL_LETSENCRYPT,JWT_SIGNING_KEY,TURN_REALM,TURN_AUTH_SECRET,TURN_CRED_TTL,ALLOWED_USER_IDS,CONTACT_LIST_JSON,SIGNALING_PUBLIC_URL,APP_PUBLIC_URL,RATE_LIMITS_JSON,VPS_HOST
        script: |
          cd /opt/webrtc-e2ee/
          
          # Create .env file
          cat > .env << EOF
          DOMAIN=${{ secrets.DOMAIN }}
          EMAIL_LETSENCRYPT=${{ secrets.EMAIL_LETSENCRYPT }}
          JWT_SIGNING_KEY=${{ secrets.JWT_SIGNING_KEY }}
          TURN_REALM=${{ secrets.TURN_REALM }}
          TURN_AUTH_SECRET=${{ secrets.TURN_AUTH_SECRET }}
          TURN_CRED_TTL=${{ secrets.TURN_CRED_TTL }}
          ALLOWED_USER_IDS=${{ secrets.ALLOWED_USER_IDS }}
          CONTACT_LIST_JSON=${{ secrets.CONTACT_LIST_JSON }}
          SIGNALING_PUBLIC_URL=${{ secrets.SIGNALING_PUBLIC_URL }}
          APP_PUBLIC_URL=${{ secrets.APP_PUBLIC_URL }}
          RATE_LIMITS_JSON=${{ secrets.RATE_LIMITS_JSON }}
          VPS_HOST=${{ secrets.VPS_HOST }}
          NODE_ENV=production
          EOF
          
          # Stop existing containers
          docker compose down || true
          
          # Remove old images to force rebuild
          docker compose build --no-cache proxy turn || true
          
          # Pull latest images
          docker compose pull signaling web || true
          
          # Start services
          docker compose up -d
          
          # Wait for services to start
          sleep 30
          
          # Check service health
          docker compose ps
          docker compose logs --tail=50
          
          echo "Deployment completed successfully!"
